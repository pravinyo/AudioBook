import com.allsoftdroid.buildsrc.AndroidConfig
import com.allsoftdroid.buildsrc.BuildTypeDebug
import com.allsoftdroid.buildsrc.BuildTypeRelease
import com.allsoftdroid.buildsrc.DataBinding
import com.allsoftdroid.buildsrc.LibraryDependency
import com.allsoftdroid.buildsrc.ModuleDependency

apply plugin: GradlePluginId.ANDROID_APPLICATION
apply plugin: GradlePluginId.KOTLIN_ANDROID
apply plugin: GradlePluginId.KOTLIN_KAPT
apply plugin: GradlePluginId.KOTLIN_ANDROID_EXTENSIONS
apply plugin: GradlePluginId.OSS_LICENSES
apply plugin: GradlePluginId.GOOGLE_SERVICES
apply plugin: GradlePluginId.FIREBASE_CRASHLYTICS
apply from: 'https://raw.githubusercontent.com/JakeWharton/SdkSearch/master/gradle/projectDependencyGraph.gradle'

android {
    compileSdkVersion(AndroidConfig.COMPILE_SDK_VERSION)
    buildToolsVersion(AndroidConfig.BUILD_TOOLS_VERSION)

    defaultConfig {
        applicationId AndroidConfig.ID
        minSdkVersion(AndroidConfig.MIN_SDK_VERSION)
        targetSdkVersion(AndroidConfig.TARGET_SDK_VERSION)
        versionCode AndroidConfig.VERSION_CODE
        versionName AndroidConfig.VERSION_NAME
        testInstrumentationRunner AndroidConfig.TEST_INSTRUMENTATION_RUNNER
    }

    buildTypes {
        release {
            minifyEnabled BuildTypeRelease.isMinifyEnabled
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled BuildTypeDebug.isMinifyEnabled
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = DataBinding.IS_ENABLED
    }

    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }

    adbOptions {
        installOptions '-g', '-r'
    }

//    dynamicFeatures = [":feature_book", ":feature_book_details"]




//    dynamicFeatures = [":feature_downloader"]
}

dependencies {

    implementation(project(path: ModuleDependency.LIBRARY_COMMON))

    implementation(project(path: ModuleDependency.FEATURE_BOOK))
    implementation(project(path: ModuleDependency.FEATURE_BOOK_DETAILS))
    implementation(project(path: ModuleDependency.FEATURE_MINI_PLAYER))
    implementation(project(path: ModuleDependency.FEATURE_DOWNLOADER))
    implementation(project(path: ModuleDependency.FEATURE_PLAYER_FULL_SCREEN))
    implementation(project(path: ModuleDependency.FEATURE_SETTINGS))
    implementation(project(path: ModuleDependency.FEATURE_LISTEN_LATER_UI))
    implementation(project(path: ModuleDependency.FEATURE_MY_BOOKS_UI))
    implementation(project(path: ModuleDependency.SERVICES))

    implementation(LibraryDependency.KOIN_X_VIEWMODEL)
    debugImplementation(LibraryDependency.LEAKY_CANARY)
    implementation(LibraryDependency.SUPPORT_V13)
    implementation(LibraryDependency.OSS_LICENSES)

    //crash analytics report
    implementation(LibraryDependency.FIREBASE_ANALYTICS)
    implementation(LibraryDependency.FIREBASE_ANALYTICS_KTX)
    implementation(LibraryDependency.FIREBASE_CRASHLYTICS)

    //test
    testImplementation(TestLibraryDependency.JUNIT)
    testImplementation(TestLibraryDependency.COROUTINES_TEST)
    testImplementation(TestLibraryDependency.ANDROID_X_CORE_TESTING)

    //androidTest
    androidTestImplementation(TestLibraryDependency.JUNIT)
    androidTestImplementation(TestLibraryDependency.ANDROID_X_CORE)
    androidTestImplementation(TestLibraryDependency.ANDROID_X_EXT_TESTING)
    androidTestImplementation(TestLibraryDependency.ESPRESSO_CORE)
    androidTestImplementation(TestLibraryDependency.ESPRESSO_CONTRIB)
}

def reportsDirectory = "$buildDir/reports/androidTests/connected"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', '/sdcard/Pictures/audioBook_test_folder'
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', '/sdcard/Pictures/audioBook_test_folder'
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', '/sdcard/Pictures/audioBook_test_folder/.', reportsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

task copyScreenshotToMachine{ task ->
    task.finalizedBy {
        fetchScreenshotsTask
    }
}
